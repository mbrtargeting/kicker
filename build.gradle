buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "com.avast.gradle:gradle-docker-compose-plugin:0.8.12"
    }
}

plugins {
    id 'java'
    id 'checkstyle'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '4.0.3'
    id 'com.bmuschko.docker-remote-api' version '4.2.0'
    id 'com.moowork.node' version '1.2.0'
}

apply plugin: 'docker-compose'

repositories {
    jcenter()
    mavenCentral()
}

/*
 * This file is part of kicker (https://github.com/mbrtargeting/kicker).
 * Copyright (c) 2019 Jan Gra√üegger.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 3.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

import com.bmuschko.gradle.docker.tasks.image.*

group = "eu.m6r.kicker"
mainClassName = 'eu.m6r.kicker.Main'

compileJava {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

checkstyle {
    ignoreFailures = false
    maxWarnings = 0
}

dependencies {
    implementation 'org.glassfish.jersey.containers:jersey-container-grizzly2-http:2.27',
                   'org.glassfish.jersey.inject:jersey-hk2:2.27'
    implementation(group: 'org.glassfish.jersey.media', name: 'jersey-media-moxy',
                   version: '2.27') {
        exclude group: 'org.eclipse.persistence', module: 'org.eclipse.persistence.moxy'
    }
    // https://mvnrepository.com/artifact/org.eclipse.persistence/org.eclipse.persistence.moxy
    implementation group: 'org.eclipse.persistence', name: 'org.eclipse.persistence.moxy',
                   version: '2.7.3'
    // https://mvnrepository.com/artifact/org.hibernate/hibernate-core
    implementation group: 'org.hibernate', name: 'hibernate-core', version: '5.4.14.Final'
    // https://mvnrepository.com/artifact/javax.websocket/javax.websocket-client-api
    implementation group: 'javax.websocket', name: 'javax.websocket-client-api', version: '1.1'
    implementation 'org.glassfish.tyrus:tyrus-client:1.14'
    // https://mvnrepository.com/artifact/org.glassfish.tyrus/tyrus-container-grizzly-client
    implementation group: 'org.glassfish.tyrus', name: 'tyrus-container-grizzly-client',
                   version: '1.14'
    // https://mvnrepository.com/artifact/org.postgresql/postgresql
    implementation group: 'org.postgresql', name: 'postgresql', version: '9.4.1212'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.8.2'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.8.2'
    implementation 'org.apache.logging.log4j:log4j-1.2-api:2.8.2'
    implementation 'org.apache.logging.log4j:log4j-slf4j-impl:2.8.2'
    // https://mvnrepository.com/artifact/org.postgresql/postgresql
    implementation group: 'de.gesundkrank.jskills', name: 'jskills', version: '1.1'
    // https://mvnrepository.com/artifact/org.apache.zookeeper/zookeeper
    implementation group: 'org.apache.zookeeper', name: 'zookeeper', version: '3.4.11'
    // https://mvnrepository.com/artifact/com.google.zxing/core
    implementation group: 'com.google.zxing', name: 'core', version: '3.3.3'
    implementation 'com.sun.xml.bind:jaxb-impl:2.3.1'
    // https://mvnrepository.com/artifact/javax.json/javax.json-api
    implementation group: 'org.glassfish', name: 'javax.json', version: '1.1.4'
    // https://mvnrepository.com/artifact/commons-io/commons-io
    implementation group: 'commons-io', name: 'commons-io', version: '2.6'
}

node {
    download = true
    version = '11.6.0'
}

shadowJar {
    baseName = 'kicker'
    classifier = null
}

task tslint(type: NpmTask) {
    args = ['--prefix', 'frontend', 'run-script', 'tslint']
}

task cleanNodeModules(type: Delete) {
    delete 'frontend/node_modules'
}

task installFrontend(type: NpmTask) {
    args = ['--prefix', 'frontend', 'install']
}

installFrontend.shouldRunAfter cleanNodeModules

task cleanFrontend(type: Delete, dependsOn: installFrontend) {
    delete 'build/resources/main/www'
    delete 'frontend/www'
}

task buildFrontend(type: NpmTask, dependsOn: cleanFrontend) {
    args = ['--prefix', 'frontend', 'run', 'build']
}

task buildProductionFrontend(type: NpmTask, dependsOn: [cleanNodeModules, cleanFrontend, tslint]) {
    args = ['--prefix', 'frontend', 'run', 'buildProduction']
}

task copyFrontend(type: Copy) {
    from 'frontend/www'
    into 'build/resources/main/www'
}

copyFrontend.shouldRunAfter buildFrontend, buildProductionFrontend

task buildApp(dependsOn: [shadowJar, copyFrontend])

task productionDockerFile(type: Dockerfile) {
    destFile = project.file('build/libs/Dockerfile')
    from "openjdk:$compileJava.targetCompatibility-slim"
    workingDir 'kicker'
    copyFile 'kicker.jar', '.'
    exposePort 8080
    entryPoint 'java', '-jar', 'kicker.jar'
}

task testDockerFile(type: Dockerfile) {
    destFile = project.file('build/libs/Dockerfile')
    from "openjdk:$compileJava.targetCompatibility-slim"
    environmentVariable 'DOCKERIZE_VERSION', 'v0.6.1'
    workingDir 'kicker'
    exposePort 8080
    addFile 'https://github.com/jwilder/dockerize/releases/download/v0.6.1/dockerize-linux-amd64-v0.6.1.tar.gz',
            'dockerize.tar.gz'
    runCommand 'tar -C /usr/local/bin -xvzf dockerize.tar.gz'
    copyFile '.', '.'
    entryPoint 'dockerize', '-wait', 'tcp://postgres:5432', 'java',
               '-Dorg.jboss.logging.provider=log4j2', '-jar', 'kicker.jar'
}

task buildDocker(type: DockerBuildImage,
                 dependsOn: [buildProductionFrontend, buildApp, productionDockerFile]) {
    inputDir = productionDockerFile.destFile.get().asFile.parentFile
    tags.add("${project.findProperty('imageName') ?: 'kicker'}:" +
             "${project.findProperty('tag') ?: 'latest'}")
}

task dockerTest(type: DockerBuildImage) {
    Task frontendDep = project.hasProperty('production') ? buildProductionFrontend : buildFrontend
    dependsOn frontendDep, buildApp, testDockerFile
    inputDir = testDockerFile.destFile.get().asFile.parentFile
    tags.add("${project.findProperty('imageName') ?: 'kicker'}:" +
             "${project.findProperty('tag') ?: 'latest'}")
    copy {
        from 'kicker.properties'
        into inputDir.get().toString()
    }
}

composeUp.dependsOn(dockerTest)
